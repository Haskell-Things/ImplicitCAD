{-# OPTIONS_GHC -fno-warn-missing-import-lists #-}
{-# OPTIONS_GHC -fno-warn-type-defaults        #-}

module GoldenSpec.Spec (spec) where

import GoldenSpec.Util (golden)
import Graphics.Implicit
import Prelude
import Test.Hspec ( describe, Spec )

default (Int)

spec :: Spec
spec = describe "golden tests" $ do
  golden "box" 1 $
    cubeR 0 True (5, 5, 5)

  golden "example13" 1 $
    union [ rect3R 0 (0,0,0) (20,20,20)
          , translate (20,20,20) (sphere 15)
          ]

  golden "example16" 1 $
    implicit (\(x,y,z) -> x^4 + y^4 + z^4 - 15000) ((-20,-20,-20),(20,20,20))

  golden "example17" 1 $
    let
      squarePipe :: ℝ3 -> ℝ -> ℝ -> SymbolicObj3
      squarePipe (x,y,z) diameter precision =
            union
            ((\start-> translate start
               $ rect3R 0 (0,0,0) (diameter,diameter,diameter)
             )
             <$>
              zip3 (fmap (\n->(fromIntegral n/precision)*x) [0..100])
                   (fmap (\n->(fromIntegral n/precision)*y) [0..100])
                   (fmap (\n->(fromIntegral n/precision)*z) [0..100]))
     in squarePipe (10,10,10) 1 100

  -- These tests were generated by the Arbitrary instance
  golden "arbitrary1" 1 $
    cylinder 16.76324 21.02933

  golden "arbitrary2" 1 $
    translate (24.07554,26.31483,24.96913)
     . scale (3.6096,4.9768,2.9848)
     . translate (-1.2054,-0.4034,-0.725975)
     $ cubeR 0.45186 False (2.41095,0.8068,1.45195)

  golden "arbitrary3" 1 $
    differenceR 1.8 (sphere 4.6)
      [ rotate3 (-0.3, 0.4, 0.36)
          $ scale (1, 1.3, 1.4)
          $ cylinder2 0.6 0.74 1
      , sphere 1.2
      , rotate3 (0.54, -0.45, -0.58) $ cubeR 1.4 True (1.5, 1.81, 1.82)
      , cylinder2 1.7 1.5 3.5
      , sphere 1.54
      ]

  golden "arbitrary4" 1 $
    unionR 1.8
      [ sphere 4.6
      , rotate3 (-0.3, 0.4, 0.36)
          $ scale (1, 1.3, 1.4)
          $ cylinder2 0.6 0.74 1
      , sphere 1.2
      , rotate3 (0.54, -0.45, -0.58) $ cubeR 1.4 True (1.5, 1.81, 1.82)
      , cylinder2 1.7 1.5 3.5
      , sphere 1.54
      ]

